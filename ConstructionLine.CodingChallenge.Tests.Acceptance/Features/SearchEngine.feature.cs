// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.6.0.0
//      SpecFlow Generator Version:3.6.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ConstructionLine.CodingChallenge.Tests.Acceptance.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.6.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("SearchEngine")]
    public partial class SearchEngineFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "SearchEngine.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "SearchEngine", "\tAs an User I want to be able to use the service\r\n\tTo search for shirts with diff" +
                    "erent sizes\r\n\tTo search for shirts with different colors\r\n\tTo search for shirts " +
                    "with different sizes and colors", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Search for shirts")]
        [NUnit.Framework.CategoryAttribute("searchengine")]
        public virtual void SearchForShirts()
        {
            string[] tagsOfScenario = new string[] {
                    "searchengine"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Search for shirts", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 9
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Name",
                            "Size",
                            "Color"});
                table1.AddRow(new string[] {
                            "E8F89748-9E61-404A-BE81-558383019A9C",
                            "Red - Small",
                            "Small",
                            "Red"});
                table1.AddRow(new string[] {
                            "1109C7C9-619C-445E-9313-6D525050AAEA",
                            "Red - Large",
                            "Large",
                            "Red"});
                table1.AddRow(new string[] {
                            "209475B9-CFCA-4A60-9EFC-C6255AA0DDEF",
                            "Red - Medium",
                            "Medium",
                            "Red"});
                table1.AddRow(new string[] {
                            "6E9A151E-1E25-494F-9F0A-A8F6F5BA3C3D",
                            "White - Small",
                            "Small",
                            "White"});
                table1.AddRow(new string[] {
                            "C8BAA8AA-8137-4D7D-8B6E-C35162F7B0A4",
                            "Yellow - Small",
                            "Small",
                            "Yellow"});
                table1.AddRow(new string[] {
                            "884D53D1-0176-4E41-9ABB-23425A9D6DBD",
                            "Black - Small",
                            "Small",
                            "Black"});
#line 11
 testRunner.Given("I configure search engine with the following details:", ((string)(null)), table1, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "Size",
                            "Color"});
                table2.AddRow(new string[] {
                            "Small",
                            "Red"});
                table2.AddRow(new string[] {
                            "Medium",
                            "Blue"});
#line 20
 testRunner.When("I do search with the following search options:", ((string)(null)), table2, "When ");
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Name",
                            "Size",
                            "Color"});
                table3.AddRow(new string[] {
                            "E8F89748-9E61-404A-BE81-558383019A9C",
                            "Red - Small",
                            "Small",
                            "Red"});
                table3.AddRow(new string[] {
                            "209475B9-CFCA-4A60-9EFC-C6255AA0DDEF",
                            "Red - Medium",
                            "Medium",
                            "Red"});
#line 25
 testRunner.Then("I get the following search results:", ((string)(null)), table3, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "Count"});
                table4.AddRow(new string[] {
                            "Small",
                            "1"});
                table4.AddRow(new string[] {
                            "Medium",
                            "1"});
                table4.AddRow(new string[] {
                            "Large",
                            "0"});
#line 30
 testRunner.And("I get the following size counts:", ((string)(null)), table4, "And ");
#line hidden
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "Count"});
                table5.AddRow(new string[] {
                            "Red",
                            "2"});
                table5.AddRow(new string[] {
                            "Blue",
                            "0"});
                table5.AddRow(new string[] {
                            "Yellow",
                            "0"});
                table5.AddRow(new string[] {
                            "White",
                            "0"});
                table5.AddRow(new string[] {
                            "Black",
                            "0"});
#line 36
 testRunner.And("I get the following color counts:", ((string)(null)), table5, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
